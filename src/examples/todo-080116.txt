TODO

today: work 5-7:30?
today: work 1:50-6? jk 2:50-6:50?
wednesday: 12:30-8, minus an hour, is 6.5 hrs (let's say 6)
thursday: 2:45-8:30, minus 45 min, is 5.5 hrs
  thursday night: +2 hours (add onto weekend)
friday: 1:20-7:40?? -1 hour = 5h 20

monday 8/8: from 1:40-8 minus 20 min is 6 hrs

* scroll around and see what else might break X
  - might need to prove another equivalence between GenUpdate_rb_intermediate and Genupdate_rb_intermediate_kv to preserve G2_Gi_n_equal. 

-----

notes from adam 8/5/16

- about the Instantiates / oracleCompMap_rb_instantiate_outer:
  - try proving a more general lemma about (do something; map ... using the thing)
  - split up the input list, pull the operation out?
    - on the first part of the list, leaves the state unchanged
    - can split oracleCompMap like this. try to state it precisely?
    - look at his proof about compMap

- about PRF_Advantages_Same: 
  - oh the theorem i stated is false actually... i thought i <> j -> PRF_Adv i = PRF_Adv j but this is wrong. take PRF_Adv i and PRF_Adv (i+1). say i = 1
   i=1
   RB RB PRF PRF
   RB RB RF  PRF

   i=2
   RB RB RB PRF
   RB RB RB RF

then the PRF advantage for the former is (probably) GREATER than that of the latter (by some bounded amount), because it gets to see an extra set of calls to the PRF.
and the PRF advantage for i=numcalls is 0. .... do i need another hybrid argument? 
  - i only want to state, though, that there exists some i such that for all j, PRF_Advantage i >= PRF_Advantage j... i can prove that right? i don't need to assume it (TODO figure out how to prove this)

  - adam has a sample assumption in OracleHybrid.v line 59: assumes each adjacent pair of games is distance by at most some constant k.
    for greater rigor, i could make another hybrid argument: 
|Prf_Advantage i - Prf_advantage (i+1)| <= k (plausible)? 
and PRF_advantage i >= Prf_advantage (i+1) 
so |Prf_advantage i - Prf_adv numCalls| <= k*numCalls 
so Prf_advantage i <= k*numCalls 
and Prf_advantage 0 > Prf_advantage i for i > 0

------ commit log

think thru some problems w proof, 
- AND maybe return v in Gen_loop_rb and _oc, <- ??
  seems fine -- when proving eq to Gen_loop_rb use a diff postcondition, and it'll make the other theorem easier X

- can i swap out the GenUpdate_rb for GenUpdate_rb_intermediate_kv just in the theorem? probably not?
  i don't think i can prove that the postcondition is eq (because that was the main problem?) so i have to actually change GenUpdate_rb X

- decide to update v twice in Gen_Update_rb and _oc (dealing with i=0 by selective skipping) -- doesn't seem to work in this theorem though, since we don't have the instantiation environment??

- sub in theorem to see if it works out
  ok i replaced Oi_prg in both theorems with Oi_prg' and Oi_oc' with Oi_oc''...
  i'll have to revert the names when i do top level
  i also need to add the assumption everywhere that all elems of list are nonzero

for two RBs, need to weaken postcondition: keys aren't same as k but they're the same

...OH NO I FORGOT IF RBs REFRESH THE KEYS THEN NORMAL_PRF_BREAKS BECAUSE THE KEY REALLY NEEDS TO BE k1 BECAUSE f_oracle's KEY DOESN'T CHANGE 
the only solution is to get rid of Oi_prg and write everything in terms of oracleCompMap... 
or i could figure how how to actually properly reason about the rb's
or i can change the whole "put the rb oracle in there" part
or i can change Oi_oc''s definition to be like TOGGLE if f_oracle or rf do this else if rb_oracle do this... isn't it supposed to be oracle-oblivious though? what's "it," the adversary?

i mean... is it the logic or is it just false
no it's the logic, on the Oi_prg side, some (k,v) goes in and doesn't get changed
(and we know k,v rand samp_
on the Oi_oc side, some (k,v) goes in and gets randomly sampled again 
so when (k,v) go into PRF, they come from the same distribution, it's just hard to know how to skip this properly
can i restart and skip this properly?

- actually replace Oi_prg and GenUpdate and Gen_loop

- do equivalence proofs

- fix everything...

------

it updates v an additional time in the beginning, 

DON'T FORGET GenUpdate_rb_intermediate needs to match GenUpdate_oc with RB oracle
AND it needs to match GenUpdate_rb_intermediate_oc. 
looks like someone, somewhere, uses GenUpdate_rb_oracle?
wait i forgot -- does Gen_loop_oc even use the initial v??
it actually returns (nil,v) which is the only time it uses it
should we assume we never request 0 blocks? or should we modify Gen_loop_rb as well, to use/return a v?

this should also preserve Gi_rb_bad_collisions and everything else

* change GenUpdate_rb_intermediate AND _oc to pass around (k,v) and re-sample (k,v)

* see if PRF theorem goes thru (only need to change case calls < i (after each, kv are same); calls >= i should be the same (kv going in are the same))
* see if RB theorem goes thru (need to change calls < i like above, calls = i should change
  - case i = 0: 
  - case i <> 0: extra v-update in beginning... well... i can just have GenUpdate_rb do the extra v-update in the beginning too? what about w no v-update though?
    or is it still doable w/out?  
    i mean if i do something different if calls=0... i have to use oracleCompMap too...and change Oi_prg... why did i even do the former with oraclemap? i should have started w oraclemap
    ok oi_prg already keeps track of # calls, so it needs to change to do GenUpdate_rb_noV...
   but if i change oi_prg, what else will break???
   ugh it shouldn't make a difference between init v was {0,1}^eta and if you update it again first thing, it's also {0,1}^eta
   just try this (in a smaller file somehow) and see if it works? maybe move the code up?
  - i think i proved everything else so if this works, the RB thm should be done
* see if anything else breaks, e.g. the collision probability proof? what else depends on it?
